(window.webpackJsonp=window.webpackJsonp||[]).push([[197],{552:function(t,a,e){"use strict";e.r(a);var s=e(44),r=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"类型转换"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#类型转换"}},[t._v("#")]),t._v(" 类型转换")]),t._v(" "),e("h2",{attrs:{id:"字符串转换"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#字符串转换"}},[t._v("#")]),t._v(" 字符串转换")]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("String")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("h2",{attrs:{id:"数字型转换"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数字型转换"}},[t._v("#")]),t._v(" 数字型转换")]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" num "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("number 类型转换规则：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("source")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("target")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("undefined")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("NaN")])])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("null")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("0")])])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("true 和 false")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("1")]),t._v(" and "),e("code",[t._v("0")])])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("string")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("去掉首尾空格后的纯数字字符串中含有的数字。如果剩余字符串为空，则转换结果为 "),e("code",[t._v("0")]),t._v("。否则，将会从剩余字符串中“读取”数字。当类型转换出现 error 时返回 "),e("code",[t._v("NaN")]),t._v("。")])])])]),t._v(" "),e("h2",{attrs:{id:"布尔型转换"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#布尔型转换"}},[t._v("#")]),t._v(" 布尔型转换")]),t._v(" "),e("ul",[e("li",[t._v("直观上为“空”的值（如 "),e("code",[t._v("0")]),t._v("、空字符串、"),e("code",[t._v("null")]),t._v("、"),e("code",[t._v("undefined")]),t._v(" 和 "),e("code",[t._v("NaN")]),t._v("）将变为 "),e("code",[t._v("false")]),t._v("。")]),t._v(" "),e("li",[t._v("其他值变成 "),e("code",[t._v("true")]),t._v("。")])])])}),[],!1,null,null,null);a.default=r.exports}}]);